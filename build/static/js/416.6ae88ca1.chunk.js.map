{"version":3,"file":"static/js/416.6ae88ca1.chunk.js","mappings":"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","sources":["components/MobileLoadingOptimizer.js","services/intelligentVideoPreloader.js"],"sourcesContent":["import { useEffect } from 'react';\nimport intelligentVideoPreloader from '../services/intelligentVideoPreloader';\n\nconst MobileLoadingOptimizer = () => {\n  useEffect(() => {\n    const isMobile = window.innerWidth <= 768;\n    \n    if (isMobile) {\n      // Register video service worker for aggressive caching\n      registerVideoServiceWorker();\n      \n      // Preload critical images and video posters for mobile\n      const criticalImages = [\n        '/images/ullishtja_logo.jpeg',\n        '/videos/dji-20240806130059-0020-d-poster.jpg',\n        '/videos/dji-20240806130609-0022-d-poster.jpg',\n        '/images/food.jpeg'\n      ];\n      \n      criticalImages.forEach(src => {\n        const img = new Image();\n        img.src = src;\n        img.setAttribute('fetchpriority', 'high');\n      });\n      \n      // Add loading priority hints to existing images\n      const images = document.querySelectorAll('img');\n      images.forEach((img, index) => {\n        if (index < 3) {\n          img.setAttribute('fetchpriority', 'high');\n        } else {\n          img.setAttribute('loading', 'lazy');\n        }\n      });\n      \n      // Enhanced mobile scroll optimizations\n      document.body.style.setProperty('-webkit-overflow-scrolling', 'touch');\n      document.body.style.setProperty('overscroll-behavior', 'none');\n      document.body.style.setProperty('-webkit-transform', 'translateZ(0)');\n      document.body.style.setProperty('transform', 'translateZ(0)');\n      \n      // Set initial viewport height with enhanced mobile support\n      const setVH = () => {\n        const vh = window.innerHeight * 0.01;\n        document.documentElement.style.setProperty('--vh', `${vh}px`);\n        \n        // Also set safe area insets for modern devices\n        const safeAreaTop = getComputedStyle(document.documentElement).getPropertyValue('--safe-area-inset-top') || '0px';\n        const safeAreaBottom = getComputedStyle(document.documentElement).getPropertyValue('--safe-area-inset-bottom') || '0px';\n        \n        document.documentElement.style.setProperty('--safe-top', safeAreaTop);\n        document.documentElement.style.setProperty('--safe-bottom', safeAreaBottom);\n      };\n      \n      setVH();\n      \n      // Enhanced event listeners with better performance\n      const resizeHandler = throttle(setVH, 100);\n      const orientationHandler = debounce(setVH, 150);\n      \n      window.addEventListener('resize', resizeHandler, { passive: true });\n      window.addEventListener('orientationchange', orientationHandler, { passive: true });\n      \n      // Optimize video memory usage on low-power devices\n      if (navigator.deviceMemory && navigator.deviceMemory <= 2) {\n        document.documentElement.classList.add('low-memory-device');\n      }\n      \n      // Enable battery optimization mode if needed\n      if ('getBattery' in navigator) {\n        navigator.getBattery().then(battery => {\n          if (battery.level < 0.2) {\n            document.documentElement.classList.add('battery-saver-mode');\n          }\n        });\n      }\n      \n      // Cleanup\n      return () => {\n        window.removeEventListener('resize', resizeHandler);\n        window.removeEventListener('orientationchange', orientationHandler);\n      };\n    }\n  }, []);\n  \n  // Register service worker for video caching\n  const registerVideoServiceWorker = async () => {\n    if ('serviceWorker' in navigator) {\n      try {\n        const registration = await navigator.serviceWorker.register('/video-sw.js', {\n          scope: '/videos/'\n        });\n        \n        console.log('Video SW registered successfully:', registration);\n        \n        // Listen for service worker updates\n        registration.addEventListener('updatefound', () => {\n          const newWorker = registration.installing;\n          if (newWorker) {\n            newWorker.addEventListener('statechange', () => {\n              if (newWorker.state === 'activated') {\n                console.log('New video service worker activated');\n              }\n            });\n          }\n        });\n        \n      } catch (error) {\n        console.warn('Video SW registration failed:', error);\n      }\n    }\n  };\n  \n  return null; // This component doesn't render anything\n};\n\n// Utility functions for better performance\nfunction throttle(func, limit) {\n  let inThrottle;\n  return function() {\n    const args = arguments;\n    const context = this;\n    if (!inThrottle) {\n      func.apply(context, args);\n      inThrottle = true;\n      setTimeout(() => inThrottle = false, limit);\n    }\n  };\n}\n\nfunction debounce(func, delay) {\n  let timeoutId;\n  return function() {\n    const args = arguments;\n    const context = this;\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(() => func.apply(context, args), delay);\n  };\n}\n\nexport default MobileLoadingOptimizer; ","class IntelligentVideoPreloader {\n  constructor() {\n    this.preloadedVideos = new Map();\n    this.preloadQueue = [];\n    this.isPreloading = false;\n    this.networkInfo = this.getNetworkInfo();\n    this.deviceInfo = this.getDeviceInfo();\n    this.userBehavior = this.getUserBehavior();\n    \n    // Monitor network changes\n    this.setupNetworkMonitoring();\n    \n    // Preload critical videos on initialization\n    this.preloadCriticalVideos();\n  }\n\n  getNetworkInfo() {\n    const connection = navigator.connection || navigator.mozConnection || navigator.webkitConnection;\n    \n    if (!connection) {\n      return {\n        effectiveType: '4g',\n        downlink: 10,\n        rtt: 100,\n        saveData: false\n      };\n    }\n\n    return {\n      effectiveType: connection.effectiveType || '4g',\n      downlink: connection.downlink || 10,\n      rtt: connection.rtt || 100,\n      saveData: connection.saveData || false\n    };\n  }\n\n  getDeviceInfo() {\n    const width = window.innerWidth;\n    const memory = navigator.deviceMemory || 4;\n    const hardwareConcurrency = navigator.hardwareConcurrency || 4;\n    \n    return {\n      isMobile: width <= 768,\n      isTablet: width > 768 && width <= 1024,\n      isDesktop: width > 1024,\n      memory,\n      hardwareConcurrency,\n      isLowPower: hardwareConcurrency <= 2 || memory <= 2,\n      pixelRatio: window.devicePixelRatio || 1\n    };\n  }\n\n  getUserBehavior() {\n    // Get user behavior patterns from localStorage or set defaults\n    const stored = localStorage.getItem('video_user_behavior');\n    const defaults = {\n      averageViewTime: 30000, // 30 seconds\n      scrollSpeed: 'medium',\n      interactionPatterns: [],\n      preferredQuality: 'auto',\n      batteryOptimization: false\n    };\n\n    return stored ? { ...defaults, ...JSON.parse(stored) } : defaults;\n  }\n\n  setupNetworkMonitoring() {\n    const connection = navigator.connection || navigator.mozConnection || navigator.webkitConnection;\n    \n    if (connection) {\n      connection.addEventListener('change', () => {\n        this.networkInfo = this.getNetworkInfo();\n        this.adjustPreloadingStrategy();\n      });\n    }\n\n    // Monitor battery status\n    if ('getBattery' in navigator) {\n      navigator.getBattery().then(battery => {\n        const updateBatteryInfo = () => {\n          this.userBehavior.batteryOptimization = battery.level < 0.2 || !battery.charging;\n        };\n        \n        battery.addEventListener('levelchange', updateBatteryInfo);\n        battery.addEventListener('chargingchange', updateBatteryInfo);\n        updateBatteryInfo();\n      });\n    }\n  }\n\n  adjustPreloadingStrategy() {\n    const { effectiveType, saveData, downlink } = this.networkInfo;\n    const { isLowPower } = this.deviceInfo;\n    const { batteryOptimization } = this.userBehavior;\n\n    // Clear preload queue if conditions are poor\n    if (saveData || batteryOptimization || effectiveType === 'slow-2g' || effectiveType === '2g') {\n      this.preloadQueue = [];\n      return;\n    }\n\n    // Adjust preloading aggressiveness based on network quality\n    if (effectiveType === '3g' || downlink < 5 || isLowPower) {\n      // Conservative preloading\n      this.preloadQueue = this.preloadQueue.slice(0, 2);\n    }\n  }\n\n  getOptimalVideoSource(videoId, priority = 'normal') {\n    const { isMobile, isTablet, isDesktop, isLowPower } = this.deviceInfo;\n    const { effectiveType, downlink, saveData } = this.networkInfo;\n    const { batteryOptimization } = this.userBehavior;\n\n    // Determine optimal quality\n    let quality = 'mobile';\n    if (isTablet && !isLowPower && !saveData) quality = 'tablet';\n    if (isDesktop && !batteryOptimization && downlink > 5) quality = 'desktop';\n\n    // Downgrade for poor network conditions\n    if (effectiveType === 'slow-2g' || effectiveType === '2g') {\n      quality = 'mobile';\n    } else if (effectiveType === '3g' && quality === 'desktop') {\n      quality = 'tablet';\n    }\n\n    // Determine optimal format\n    const video = document.createElement('video');\n    const supportsWebM = video.canPlayType('video/webm') !== '';\n    const supportsAV1 = video.canPlayType('video/webm; codecs=\"av01.0.05M.08\"') !== '';\n\n    let format = 'mp4';\n    if (supportsWebM && downlink > 2) format = 'webm';\n    if (supportsAV1 && downlink > 5 && !isLowPower && priority === 'high') format = 'av1';\n\n    return {\n      src: `/videos/${videoId}-${quality}.${format === 'av1' ? 'av1.mp4' : format}`,\n      quality,\n      format,\n      poster: `/videos/${videoId}-poster.jpg`\n    };\n  }\n\n  async preloadVideo(videoId, priority = 'normal') {\n    // Check if already preloaded\n    if (this.preloadedVideos.has(videoId)) {\n      return this.preloadedVideos.get(videoId);\n    }\n\n    // Check if we should preload based on current conditions\n    if (!this.shouldPreload(priority)) {\n      return null;\n    }\n\n    const videoSource = this.getOptimalVideoSource(videoId, priority);\n    \n    try {\n      const video = document.createElement('video');\n      video.preload = 'metadata';\n      video.muted = true;\n      video.playsInline = true;\n\n      // Create a promise that resolves when video is ready\n      const preloadPromise = new Promise((resolve, reject) => {\n        const timeoutId = setTimeout(() => {\n          reject(new Error('Preload timeout'));\n        }, 10000); // 10 second timeout\n\n        video.addEventListener('loadedmetadata', () => {\n          clearTimeout(timeoutId);\n          resolve({\n            video,\n            source: videoSource,\n            preloadedAt: Date.now()\n          });\n        }, { once: true });\n\n        video.addEventListener('error', () => {\n          clearTimeout(timeoutId);\n          reject(new Error('Video preload failed'));\n        }, { once: true });\n      });\n\n      video.src = videoSource.src;\n      \n      const result = await preloadPromise;\n      this.preloadedVideos.set(videoId, result);\n      \n      // Clean up old preloaded videos if memory is getting full\n      this.cleanupOldPreloads();\n      \n      return result;\n    } catch (error) {\n      console.warn(`Failed to preload video ${videoId}:`, error);\n      return null;\n    }\n  }\n\n  shouldPreload(priority) {\n    const { effectiveType, saveData, downlink } = this.networkInfo;\n    const { isLowPower } = this.deviceInfo;\n    const { batteryOptimization } = this.userBehavior;\n\n    // Never preload on data saver mode or very poor connections\n    if (saveData || effectiveType === 'slow-2g' || effectiveType === '2g') {\n      return false;\n    }\n\n    // Don't preload on low battery\n    if (batteryOptimization) {\n      return priority === 'high';\n    }\n\n    // Conservative preloading on low-power devices\n    if (isLowPower) {\n      return priority === 'high' && downlink > 2;\n    }\n\n    // Liberal preloading on good connections\n    if (effectiveType === '4g' && downlink > 5) {\n      return true;\n    }\n\n    // Medium preloading on decent connections\n    if (effectiveType === '3g' || downlink > 2) {\n      return priority !== 'low';\n    }\n\n    return false;\n  }\n\n  cleanupOldPreloads() {\n    const maxPreloads = this.deviceInfo.isLowPower ? 3 : 6;\n    const now = Date.now();\n    const maxAge = 5 * 60 * 1000; // 5 minutes\n\n    // Convert to array for sorting\n    const preloads = Array.from(this.preloadedVideos.entries());\n    \n    // Remove old preloads\n    preloads.forEach(([videoId, data]) => {\n      if (now - data.preloadedAt > maxAge) {\n        this.preloadedVideos.delete(videoId);\n        if (data.video) {\n          data.video.src = '';\n          data.video.load();\n        }\n      }\n    });\n\n    // If still too many, remove oldest\n    if (this.preloadedVideos.size > maxPreloads) {\n      const sortedPreloads = preloads\n        .sort((a, b) => a[1].preloadedAt - b[1].preloadedAt)\n        .slice(0, this.preloadedVideos.size - maxPreloads);\n\n      sortedPreloads.forEach(([videoId, data]) => {\n        this.preloadedVideos.delete(videoId);\n        if (data.video) {\n          data.video.src = '';\n          data.video.load();\n        }\n      });\n    }\n  }\n\n  async preloadCriticalVideos() {\n    // Define critical videos that should be preloaded immediately\n    const criticalVideos = [\n      'dji-20240806130059-0020-d', // Hero video\n      'dji-20240806130609-0022-d'  // Most viewed video\n    ];\n\n    // Only preload if conditions are good\n    if (!this.shouldPreload('normal')) {\n      return;\n    }\n\n    // Preload critical videos with high priority\n    const preloadPromises = criticalVideos.map(videoId => \n      this.preloadVideo(videoId, 'high')\n    );\n\n    try {\n      await Promise.allSettled(preloadPromises);\n    } catch (error) {\n      console.warn('Some critical videos failed to preload:', error);\n    }\n  }\n\n  // Method to intelligently preload based on scroll position and user behavior\n  async preloadOnScroll(visibleVideoIds, upcomingVideoIds) {\n    if (!this.shouldPreload('normal')) {\n      return;\n    }\n\n    // Preload upcoming videos based on scroll direction and speed\n    const promises = upcomingVideoIds.slice(0, 2).map(videoId => \n      this.preloadVideo(videoId, 'normal')\n    );\n\n    await Promise.allSettled(promises);\n  }\n\n  // Get preloaded video if available\n  getPreloadedVideo(videoId) {\n    return this.preloadedVideos.get(videoId);\n  }\n\n  // Track user interaction patterns for better prediction\n  trackUserInteraction(eventType, videoId, data = {}) {\n    const interaction = {\n      timestamp: Date.now(),\n      eventType,\n      videoId,\n      ...data\n    };\n\n    this.userBehavior.interactionPatterns.push(interaction);\n\n    // Keep only recent interactions (last 100)\n    if (this.userBehavior.interactionPatterns.length > 100) {\n      this.userBehavior.interactionPatterns = this.userBehavior.interactionPatterns.slice(-100);\n    }\n\n    // Save to localStorage\n    localStorage.setItem('video_user_behavior', JSON.stringify(this.userBehavior));\n  }\n\n  // Get performance metrics\n  getPerformanceMetrics() {\n    return {\n      preloadedCount: this.preloadedVideos.size,\n      networkType: this.networkInfo.effectiveType,\n      deviceType: this.deviceInfo.isMobile ? 'mobile' : this.deviceInfo.isTablet ? 'tablet' : 'desktop',\n      batteryOptimization: this.userBehavior.batteryOptimization,\n      memoryUsage: this.preloadedVideos.size * 0.5 // Estimated MB per preloaded video\n    };\n  }\n}\n\n// Create singleton instance\nconst intelligentVideoPreloader = new IntelligentVideoPreloader();\n\nexport default intelligentVideoPreloader; "],"names":["MobileLoadingOptimizer","useEffect","window","innerWidth","registerVideoServiceWorker","forEach","src","img","Image","setAttribute","document","querySelectorAll","index","body","style","setProperty","setVH","vh","innerHeight","documentElement","concat","safeAreaTop","getComputedStyle","getPropertyValue","safeAreaBottom","resizeHandler","func","limit","inThrottle","args","arguments","context","this","apply","setTimeout","throttle","orientationHandler","delay","timeoutId","clearTimeout","debounce","addEventListener","passive","navigator","deviceMemory","classList","add","getBattery","then","battery","level","removeEventListener","async","registration","serviceWorker","register","scope","console","log","newWorker","installing","state","error","warn","constructor","preloadedVideos","Map","preloadQueue","isPreloading","networkInfo","getNetworkInfo","deviceInfo","getDeviceInfo","userBehavior","getUserBehavior","setupNetworkMonitoring","preloadCriticalVideos","connection","mozConnection","webkitConnection","effectiveType","downlink","rtt","saveData","width","memory","hardwareConcurrency","isMobile","isTablet","isDesktop","isLowPower","pixelRatio","devicePixelRatio","stored","localStorage","getItem","defaults","averageViewTime","scrollSpeed","interactionPatterns","preferredQuality","batteryOptimization","_objectSpread","JSON","parse","adjustPreloadingStrategy","updateBatteryInfo","charging","slice","getOptimalVideoSource","videoId","priority","length","undefined","quality","video","createElement","format","canPlayType","poster","preloadVideo","has","get","shouldPreload","videoSource","preload","muted","playsInline","preloadPromise","Promise","resolve","reject","Error","source","preloadedAt","Date","now","once","result","set","cleanupOldPreloads","maxPreloads","preloads","Array","from","entries","_ref","data","delete","load","size","sort","a","b","_ref2","preloadPromises","map","allSettled","preloadOnScroll","visibleVideoIds","upcomingVideoIds","promises","getPreloadedVideo","trackUserInteraction","eventType","interaction","timestamp","push","setItem","stringify","getPerformanceMetrics","preloadedCount","networkType","deviceType","memoryUsage"],"sourceRoot":""}