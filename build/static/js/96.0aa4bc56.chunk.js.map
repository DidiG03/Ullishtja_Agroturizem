{"version":3,"file":"static/js/96.0aa4bc56.chunk.js","mappings":"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","sources":["components/AdminLogin.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useSignIn, useUser } from '@clerk/clerk-react';\nimport { Navigate } from 'react-router-dom';\nimport './AdminLogin.css';\n\nconst AdminLogin = () => {\n  const { isSignedIn, user } = useUser();\n  const { signIn, setActive } = useSignIn();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [showForgotPassword, setShowForgotPassword] = useState(false);\n  const [resetEmailSent, setResetEmailSent] = useState(false);\n  const [resetCode, setResetCode] = useState('');\n  const [newPassword, setNewPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [resetStep, setResetStep] = useState('request'); // 'request', 'verify', 'reset'\n\n  // Check if user is already signed in and is an admin\n  if (isSignedIn && user) {\n    const adminUserIds = process.env.REACT_APP_ADMIN_USER_IDS?.split(',') || [];\n    if (adminUserIds.includes(user.id)) {\n      return <Navigate to=\"/dashboard\" replace />;\n    }\n  }\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    setError('');\n\n    try {\n      const result = await signIn.create({\n        identifier: email,\n        password: password,\n      });\n\n      if (result.status === 'complete') {\n        await setActive({ session: result.createdSessionId });\n        // Navigation will happen automatically due to the useUser hook above\n      } else {\n        setError('Login failed. Please check your credentials.');\n      }\n    } catch (err) {\n      setError(err.errors?.[0]?.message || 'Login failed. Please check your credentials.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleForgotPassword = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    setError('');\n\n    try {\n      await signIn.create({\n        identifier: email,\n      });\n\n      const firstFactor = signIn.supportedFirstFactors.find(\n        (factor) => factor.strategy === 'reset_password_email_code'\n      );\n\n      if (firstFactor) {\n        await signIn.prepareFirstFactor({\n          strategy: 'reset_password_email_code',\n          emailAddressId: firstFactor.emailAddressId,\n        });\n        setResetEmailSent(true);\n        setResetStep('verify');\n      } else {\n        setError('Password reset is not available for this account.');\n      }\n    } catch (err) {\n      setError(err.errors?.[0]?.message || 'Failed to send reset email. Please check your email address.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleVerifyResetCode = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    setError('');\n\n    try {\n      const result = await signIn.attemptFirstFactor({\n        strategy: 'reset_password_email_code',\n        code: resetCode,\n      });\n\n      if (result.status === 'needs_new_password') {\n        setResetStep('reset');\n      } else {\n        setError('Invalid reset code. Please try again.');\n      }\n    } catch (err) {\n      setError(err.errors?.[0]?.message || 'Invalid reset code. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handlePasswordReset = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    setError('');\n\n    if (newPassword !== confirmPassword) {\n      setError('Passwords do not match.');\n      setLoading(false);\n      return;\n    }\n\n    if (newPassword.length < 8) {\n      setError('Password must be at least 8 characters long.');\n      setLoading(false);\n      return;\n    }\n\n    try {\n      const result = await signIn.resetPassword({\n        password: newPassword,\n      });\n\n      if (result.status === 'complete') {\n        await setActive({ session: result.createdSessionId });\n        // Navigation will happen automatically due to the useUser hook above\n      } else {\n        setError('Failed to reset password. Please try again.');\n      }\n    } catch (err) {\n      setError(err.errors?.[0]?.message || 'Failed to reset password. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const resetForgotPasswordState = () => {\n    setShowForgotPassword(false);\n    setResetEmailSent(false);\n    setResetCode('');\n    setNewPassword('');\n    setConfirmPassword('');\n    setResetStep('request');\n    setError('');\n  };\n\n  if (showForgotPassword) {\n    return (\n      <div className=\"admin-login-container\">\n        <div className=\"admin-login-content\">\n          <div className=\"login-header\">\n            <img src=\"https://ucarecdn.com/f2ebac4d-52d3-45f7-997d-3e2dea09557b/ullishtja_logo.jpeg\" alt=\"Ullishtja Agriturizem\" className=\"login-logo\" />\n            <h1>Reset Password</h1>\n            <p>\n              {resetStep === 'request' && 'Enter your email to receive a reset code'}\n              {resetStep === 'verify' && 'Enter the code sent to your email'}\n              {resetStep === 'reset' && 'Create your new password'}\n            </p>\n          </div>\n          \n          {error && (\n            <div className=\"error-message\">\n              <span className=\"error-icon\">⚠️</span>\n              {error}\n            </div>\n          )}\n\n          {resetEmailSent && resetStep === 'verify' && (\n            <div className=\"success-message\">\n              <span className=\"success-icon\">✅</span>\n              Reset code sent to {email}. Please check your email.\n            </div>\n          )}\n\n          {resetStep === 'request' && (\n            <form onSubmit={handleForgotPassword} className=\"custom-login-form\">\n              <div className=\"form-group\">\n                <label htmlFor=\"reset-email\">Email Address</label>\n                <input\n                  type=\"email\"\n                  id=\"reset-email\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  placeholder=\"Enter your email\"\n                  required\n                  disabled={loading}\n                />\n              </div>\n\n              <button \n                type=\"submit\" \n                className=\"login-button\"\n                disabled={loading}\n              >\n                {loading ? (\n                  <>\n                    <span className=\"spinner\"></span>\n                    Sending...\n                  </>\n                ) : (\n                  'Send Reset Code'\n                )}\n              </button>\n            </form>\n          )}\n\n          {resetStep === 'verify' && (\n            <form onSubmit={handleVerifyResetCode} className=\"custom-login-form\">\n              <div className=\"form-group\">\n                <label htmlFor=\"reset-code\">Reset Code</label>\n                <input\n                  type=\"text\"\n                  id=\"reset-code\"\n                  value={resetCode}\n                  onChange={(e) => setResetCode(e.target.value)}\n                  placeholder=\"Enter the 6-digit code\"\n                  required\n                  disabled={loading}\n                  maxLength={6}\n                />\n              </div>\n\n              <button \n                type=\"submit\" \n                className=\"login-button\"\n                disabled={loading}\n              >\n                {loading ? (\n                  <>\n                    <span className=\"spinner\"></span>\n                    Verifying...\n                  </>\n                ) : (\n                  'Verify Code'\n                )}\n              </button>\n            </form>\n          )}\n\n          {resetStep === 'reset' && (\n            <form onSubmit={handlePasswordReset} className=\"custom-login-form\">\n              <div className=\"form-group\">\n                <label htmlFor=\"new-password\">New Password</label>\n                <input\n                  type=\"password\"\n                  id=\"new-password\"\n                  value={newPassword}\n                  onChange={(e) => setNewPassword(e.target.value)}\n                  placeholder=\"Enter new password\"\n                  required\n                  disabled={loading}\n                  minLength={8}\n                />\n              </div>\n\n              <div className=\"form-group\">\n                <label htmlFor=\"confirm-password\">Confirm Password</label>\n                <input\n                  type=\"password\"\n                  id=\"confirm-password\"\n                  value={confirmPassword}\n                  onChange={(e) => setConfirmPassword(e.target.value)}\n                  placeholder=\"Confirm new password\"\n                  required\n                  disabled={loading}\n                  minLength={8}\n                />\n              </div>\n\n              <button \n                type=\"submit\" \n                className=\"login-button\"\n                disabled={loading}\n              >\n                {loading ? (\n                  <>\n                    <span className=\"spinner\"></span>\n                    Resetting...\n                  </>\n                ) : (\n                  'Reset Password'\n                )}\n              </button>\n            </form>\n          )}\n\n          <div className=\"auth-links\">\n            <button \n              onClick={resetForgotPasswordState}\n              className=\"link-button\"\n              disabled={loading}\n            >\n              ← Back to Login\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"admin-login-container\">\n      <div className=\"admin-login-content\">\n        <div className=\"login-header\">\n          <img src=\"https://ucarecdn.com/f2ebac4d-52d3-45f7-997d-3e2dea09557b/ullishtja_logo.jpeg\" alt=\"Ullishtja Agriturizem\" className=\"login-logo\" />\n          <h1>Admin Login</h1>\n          <p>Sign in to access the admin dashboard</p>\n        </div>\n        \n        <form onSubmit={handleSubmit} className=\"custom-login-form\">\n          {error && (\n            <div className=\"error-message\">\n              <span className=\"error-icon\">⚠️</span>\n              {error}\n            </div>\n          )}\n          \n          <div className=\"form-group\">\n            <label htmlFor=\"email\">Email Address</label>\n            <input\n              type=\"email\"\n              id=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              placeholder=\"Enter your email\"\n              required\n              disabled={loading}\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"password\">Password</label>\n            <input\n              type=\"password\"\n              id=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              placeholder=\"Enter your password\"\n              required\n              disabled={loading}\n            />\n          </div>\n\n          <button \n            type=\"submit\" \n            className=\"login-button\"\n            disabled={loading}\n          >\n            {loading ? (\n              <>\n                <span className=\"spinner\"></span>\n                Signing in...\n              </>\n            ) : (\n              'Sign In'\n            )}\n          </button>\n        </form>\n\n        <div className=\"auth-links\">\n          <button \n            onClick={() => setShowForgotPassword(true)}\n            className=\"link-button\"\n            disabled={loading}\n          >\n            Forgot your password?\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AdminLogin; "],"names":["AdminLogin","isSignedIn","user","useUser","signIn","setActive","useSignIn","email","setEmail","useState","password","setPassword","loading","setLoading","error","setError","showForgotPassword","setShowForgotPassword","resetEmailSent","setResetEmailSent","resetCode","setResetCode","newPassword","setNewPassword","confirmPassword","setConfirmPassword","resetStep","setResetStep","_process$env$REACT_AP","process","split","includes","id","_jsx","Navigate","to","replace","handleForgotPassword","async","e","preventDefault","create","identifier","firstFactor","supportedFirstFactors","find","factor","strategy","prepareFirstFactor","emailAddressId","err","_err$errors2","_err$errors2$","errors","message","handleVerifyResetCode","attemptFirstFactor","code","status","_err$errors3","_err$errors3$","handlePasswordReset","length","result","resetPassword","session","createdSessionId","_err$errors4","_err$errors4$","resetForgotPasswordState","className","children","_jsxs","src","alt","onSubmit","htmlFor","type","value","onChange","target","placeholder","required","disabled","_Fragment","maxLength","minLength","onClick","_err$errors","_err$errors$"],"sourceRoot":""}