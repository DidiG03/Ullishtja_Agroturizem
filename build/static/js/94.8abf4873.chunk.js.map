{"version":3,"file":"static/js/94.8abf4873.chunk.js","mappings":"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","sources":["components/OptimizedImage.js","components/GooglePhotos.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\n\nconst OptimizedImage = ({ \n  src, \n  alt, \n  className = '', \n  sizes = '(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw',\n  loading = 'lazy',\n  ...props \n}) => {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [isInView, setIsInView] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const imgRef = useRef();\n\n  // Extract filename without extension for WebP/JPEG variants\n  const getImageVariants = (originalSrc) => {\n    // Check if this is an external URL (starts with http/https)\n    const isExternalUrl = originalSrc.startsWith('http://') || originalSrc.startsWith('https://');\n    \n    if (isExternalUrl) {\n      // For external URLs, just use the original source without optimization\n      return {\n        webp: originalSrc,\n        jpeg: originalSrc,\n        fallback: originalSrc\n      };\n    }\n    \n    // For local images, use the original optimization logic\n    const fileName = originalSrc.split('/').pop().split('.')[0];\n    const basePath = originalSrc.substring(0, originalSrc.lastIndexOf('/'));\n    \n    return {\n      webp: `${basePath}/gallery/${fileName}-original.webp`,\n      jpeg: `${basePath}/gallery/${fileName}.jpg`,\n      fallback: originalSrc\n    };\n  };\n\n  const imageVariants = getImageVariants(src);\n\n  // Intersection Observer for lazy loading\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        if (entry.isIntersecting) {\n          setIsInView(true);\n          observer.disconnect();\n        }\n      },\n      { threshold: 0.1, rootMargin: '50px' }\n    );\n\n    if (imgRef.current) {\n      observer.observe(imgRef.current);\n    }\n\n    return () => observer.disconnect();\n  }, []);\n\n  const handleLoad = () => {\n    setIsLoaded(true);\n  };\n\n  const handleError = () => {\n    setHasError(true);\n  };\n\n  // Check if browser supports WebP\n  const supportsWebP = () => {\n    const canvas = document.createElement('canvas');\n    canvas.width = canvas.height = 1;\n    return canvas.toDataURL('image/webp').indexOf('data:image/webp') === 0;\n  };\n\n  const getOptimalSrc = () => {\n    if (hasError) return imageVariants.fallback;\n    \n    // Check if this is an external URL\n    const isExternalUrl = src.startsWith('http://') || src.startsWith('https://');\n    \n    if (isExternalUrl) {\n      // For external URLs, just return the original URL\n      return src;\n    }\n    \n    // If image hasn't been processed yet, use original (for local images)\n    if (src.includes('/images/') && !src.includes('/gallery/')) {\n      return src;\n    }\n    \n    return supportsWebP() ? imageVariants.webp : imageVariants.jpeg;\n  };\n\n  return (\n    <div ref={imgRef} className={`optimized-image-container ${className}`}>\n      {/* Loading placeholder */}\n      {!isLoaded && (\n        <div className=\"image-placeholder\">\n          <div className=\"loading-animation\"></div>\n        </div>\n      )}\n      \n      {/* Main image - only load when in view or loading is eager */}\n      {(isInView || loading === 'eager') && (\n        <picture>\n          {/* WebP source for modern browsers */}\n          <source\n            srcSet={`\n              ${imageVariants.webp.replace('-original', '-mobile')} 600w,\n              ${imageVariants.webp} 1200w\n            `}\n            sizes={sizes}\n            type=\"image/webp\"\n          />\n          \n          {/* JPEG fallback */}\n          <source\n            srcSet={`\n              ${imageVariants.jpeg.replace('.jpg', '-mobile.jpg')} 600w,\n              ${imageVariants.jpeg} 1200w\n            `}\n            sizes={sizes}\n            type=\"image/jpeg\"\n          />\n          \n          {/* Fallback img element */}\n          <img\n            src={getOptimalSrc()}\n            alt={alt}\n            loading={loading}\n            onLoad={handleLoad}\n            onError={handleError}\n            className={`optimized-image ${isLoaded ? 'loaded' : 'loading'}`}\n            {...props}\n          />\n        </picture>\n      )}\n    </div>\n  );\n};\n\nexport default OptimizedImage; ","import React, { useState, useEffect, useCallback } from 'react';\nimport googleReviewsService from '../services/googleReviews';\nimport OptimizedImage from './OptimizedImage';\nimport './GooglePhotos.css';\n\nconst GooglePhotos = ({ currentLanguage, translations }) => {\n  const [photosData, setPhotosData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [selectedPhoto, setSelectedPhoto] = useState(null);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [showLightbox, setShowLightbox] = useState(false);\n  const [showAllPhotos, setShowAllPhotos] = useState(false);\n\n  const t = translations;\n\n  // Check if screen is mobile\n  const [isMobile, setIsMobile] = useState(false);\n  \n  useEffect(() => {\n    const checkScreenSize = () => {\n      setIsMobile(window.innerWidth <= 768);\n    };\n    \n    checkScreenSize();\n    window.addEventListener('resize', checkScreenSize);\n    \n    return () => window.removeEventListener('resize', checkScreenSize);\n  }, []);\n\n  useEffect(() => {\n    const loadPhotos = async () => {\n      try {\n        const data = await googleReviewsService.fetchGooglePlacePhotos();\n        setPhotosData(data);\n      } catch (error) {\n        console.error('Error loading photos:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadPhotos();\n  }, []);\n\n  const openLightbox = useCallback((photo, index) => {\n    setSelectedPhoto(photo);\n    setCurrentIndex(index);\n    setShowLightbox(true);\n    // Prevent body scroll when lightbox is open\n    document.body.style.overflow = 'hidden';\n  }, []);\n\n  const closeLightbox = useCallback(() => {\n    setShowLightbox(false);\n    setSelectedPhoto(null);\n    // Restore body scroll\n    document.body.style.overflow = 'unset';\n  }, []);\n\n  const goToNext = useCallback(() => {\n    if (photosData && photosData.photos.length > 0) {\n      const nextIndex = (currentIndex + 1) % photosData.photos.length;\n      setCurrentIndex(nextIndex);\n      setSelectedPhoto(photosData.photos[nextIndex]);\n    }\n  }, [currentIndex, photosData]);\n\n  const goToPrevious = useCallback(() => {\n    if (photosData && photosData.photos.length > 0) {\n      const prevIndex = currentIndex === 0 ? photosData.photos.length - 1 : currentIndex - 1;\n      setCurrentIndex(prevIndex);\n      setSelectedPhoto(photosData.photos[prevIndex]);\n    }\n  }, [currentIndex, photosData]);\n\n  // Keyboard navigation\n  useEffect(() => {\n    const handleKeyPress = (e) => {\n      if (!showLightbox) return;\n      \n      switch (e.key) {\n        case 'ArrowRight':\n          goToNext();\n          break;\n        case 'ArrowLeft':\n          goToPrevious();\n          break;\n        case 'Escape':\n          closeLightbox();\n          break;\n        default:\n          break;\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyPress);\n    return () => window.removeEventListener('keydown', handleKeyPress);\n  }, [showLightbox, goToNext, goToPrevious, closeLightbox]);\n\n  if (loading) {\n    return (\n      <section id=\"customer-photos\" className=\"customer-photos\">\n        <div className=\"container\">\n          <div className=\"photos-header\">\n            <h2>{t.customerPhotos?.title || 'Customer Photos'}</h2>\n            <p>{t.customerPhotos?.subtitle || 'See what our guests are sharing'}</p>\n          </div>\n          <div className=\"photos-loading\">\n            <div className=\"loading-grid\">\n              {[...Array(8)].map((_, i) => (\n                <div key={i} className=\"loading-photo\"></div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  if (!photosData || !photosData.photos || photosData.photos.length === 0) {\n    return null; // Don't render if no photos\n  }\n\n  // Determine how many photos to show based on screen size and showAllPhotos state\n  const getPhotosToShow = () => {\n    if (isMobile) {\n      if (showAllPhotos) {\n        return photosData.photos;\n      } else {\n        // Show a diverse selection: 1st, 3rd, and 5th photos (or available ones)\n        // Alternative options (uncomment the one you prefer):\n        \n        // Option 1: Skip first photo, show 2nd, 4th, 6th\n        // const selectedIndices = [1, 3, 5].filter(index => index < photosData.photos.length);\n        \n        // Option 2: Show photos from the middle range\n        // const startIndex = Math.max(0, Math.floor(photosData.photos.length / 3));\n        // const selectedIndices = [startIndex, startIndex + 1, startIndex + 2].filter(index => index < photosData.photos.length);\n        \n        // Option 3: Random selection (changes each time)\n        // const availableIndices = photosData.photos.map((_, index) => index);\n        // const shuffled = availableIndices.sort(() => 0.5 - Math.random()).slice(0, 3);\n        // return shuffled.map(index => photosData.photos[index]);\n        \n        // Current: 2nd, 3rd, 5th photos (skipping the first image)\n        const selectedIndices = [7, 8, 4].filter(index => index < photosData.photos.length);\n        return selectedIndices.map(index => photosData.photos[index]);\n      }\n    }\n    return photosData.photos.slice(0, 8);\n  };\n\n  const photosToShow = getPhotosToShow();\n  const hasMorePhotos = isMobile ? photosData.photos.length > 3 : photosData.photos.length > 8;\n\n  const handleViewAllClick = () => {\n    if (isMobile) {\n      setShowAllPhotos(!showAllPhotos);\n    } else {\n      openLightbox(photosData.photos[0], 0);\n    }\n  };\n\n  return (\n    <>\n      <section id=\"customer-photos\" className=\"customer-photos\">\n        <div className=\"container\">\n          <div className=\"photos-header\">\n            <h2>{t.customerPhotos?.title || 'Customer Photos'}</h2>\n            <p>{t.customerPhotos?.subtitle || 'See what our guests are sharing'}</p>\n          </div>\n          \n          <div className=\"photos-grid\">\n            {photosToShow.map((photo, index) => (\n              <div \n                key={photo.id} \n                className={`photo-item ${(index === 0 && !isMobile) ? 'featured' : ''}`}\n                onClick={() => openLightbox(photo, index)}\n                role=\"button\"\n                tabIndex={0}\n                onKeyDown={(e) => {\n                  if (e.key === 'Enter' || e.key === ' ') {\n                    openLightbox(photo, index);\n                  }\n                }}\n              >\n                <div className=\"photo-container\">\n                  <OptimizedImage\n                    src={photo.url || photo.highResUrl}\n                    alt={`Customer photo ${index + 1}`}\n                    className=\"customer-photo\"\n                    loading={index < 4 ? \"eager\" : \"lazy\"}\n                  />\n                  <div className=\"photo-overlay\">\n                    <div className=\"photo-icon\">\n                      <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\">\n                        <path d=\"M15 3H6C5.175 3 4.5 3.675 4.5 4.5V15\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n                        <path d=\"M10.5 3H18C18.825 3 19.5 3.675 19.5 4.5V12\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n                        <path d=\"M19.5 16.5V18C19.5 18.825 18.825 19.5 18 19.5H6C5.175 19.5 4.5 18.825 4.5 18V6\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n                      </svg>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n          \n          {hasMorePhotos && (\n            <div className=\"view-more\">\n              <button \n                className=\"view-more-btn\"\n                onClick={handleViewAllClick}\n              >\n                {isMobile && showAllPhotos \n                  ? (t.customerPhotos?.showLess || 'Shiko më pak') \n                  : (t.customerPhotos?.viewAll || 'Shiko të gjitha')\n                }\n                <span className=\"photo-count\">({photosData.photos.length})</span>\n              </button>\n            </div>\n          )}\n        </div>\n      </section>\n\n      {/* Lightbox */}\n      {showLightbox && selectedPhoto && (\n        <div className=\"lightbox-overlay\" onClick={closeLightbox}>\n          <div className=\"lightbox-container\" onClick={(e) => e.stopPropagation()}>\n            <button className=\"lightbox-close\" onClick={closeLightbox}>\n              <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\">\n                <path d=\"M18 6L6 18M6 6L18 18\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\"/>\n              </svg>\n            </button>\n            \n            <div className=\"lightbox-content\">\n              <button className=\"lightbox-nav lightbox-prev\" onClick={goToPrevious}>\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\">\n                  <path d=\"M15 18L9 12L15 6\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n                </svg>\n              </button>\n              \n              <div className=\"lightbox-image-container\">\n                <OptimizedImage\n                  src={selectedPhoto.highResUrl || selectedPhoto.url}\n                  alt={`Customer photo ${currentIndex + 1}`}\n                  className=\"lightbox-image\"\n                  loading=\"eager\"\n                />\n              </div>\n              \n              <button className=\"lightbox-nav lightbox-next\" onClick={goToNext}>\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\">\n                  <path d=\"M9 18L15 12L9 6\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n                </svg>\n              </button>\n            </div>\n            \n            <div className=\"lightbox-info\">\n              <span className=\"photo-counter\">\n                {currentIndex + 1} / {photosData.photos.length}\n              </span>\n              {selectedPhoto.attributions && selectedPhoto.attributions.length > 0 && (\n                <div className=\"photo-attribution\">\n                  {selectedPhoto.attributions[0]}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default GooglePhotos;"],"names":["_ref","src","alt","className","sizes","loading","props","_objectWithoutProperties","_excluded","isLoaded","setIsLoaded","useState","isInView","setIsInView","hasError","setHasError","imgRef","useRef","imageVariants","originalSrc","startsWith","webp","jpeg","fallback","fileName","split","pop","basePath","substring","lastIndexOf","concat","getImageVariants","useEffect","observer","IntersectionObserver","_ref2","entry","isIntersecting","disconnect","threshold","rootMargin","current","observe","_jsxs","ref","children","_jsx","srcSet","replace","type","_objectSpread","getOptimalSrc","includes","supportsWebP","canvas","document","createElement","width","height","toDataURL","indexOf","onLoad","handleLoad","onError","handleError","_t$customerPhotos3","_t$customerPhotos4","_t$customerPhotos5","_t$customerPhotos6","currentLanguage","translations","photosData","setPhotosData","setLoading","selectedPhoto","setSelectedPhoto","currentIndex","setCurrentIndex","showLightbox","setShowLightbox","showAllPhotos","setShowAllPhotos","t","isMobile","setIsMobile","checkScreenSize","window","innerWidth","addEventListener","removeEventListener","async","data","googleReviewsService","fetchGooglePlacePhotos","error","console","loadPhotos","openLightbox","useCallback","photo","index","body","style","overflow","closeLightbox","goToNext","photos","length","nextIndex","goToPrevious","prevIndex","_t$customerPhotos","_t$customerPhotos2","handleKeyPress","e","key","id","customerPhotos","title","subtitle","Array","map","_","i","photosToShow","getPhotosToShow","filter","slice","hasMorePhotos","_Fragment","onClick","role","tabIndex","onKeyDown","OptimizedImage","url","highResUrl","viewBox","fill","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","handleViewAllClick","showLess","viewAll","stopPropagation","attributions"],"sourceRoot":""}