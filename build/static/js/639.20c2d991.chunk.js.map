{"version":3,"file":"static/js/639.20c2d991.chunk.js","mappings":"4LAoLA,QAhLA,SAAoBA,GAAgC,IAA/B,gBAAEC,EAAe,QAAEC,GAASF,EAC/C,MAAOG,EAAYC,IAAiBC,EAAAA,EAAAA,UAAS,KACtCC,EAAgBC,IAAqBF,EAAAA,EAAAA,UAAS,OAC9CG,EAASC,IAAcJ,EAAAA,EAAAA,WAAS,IAChCK,EAAOC,IAAYN,EAAAA,EAAAA,UAAS,OAEnCO,EAAAA,EAAAA,WAAU,KACRC,KACC,IAEH,MAAMA,EAAWC,UACf,IACEL,GAAW,GACX,MAAMM,QAAaC,EAAAA,EAAYC,kBAG/B,GAFAC,QAAQC,IAAI,4BAA6BJ,IAErCA,IAAQA,EAAKK,QAWf,MAAM,IAAIC,OAAU,OAAJN,QAAI,IAAJA,OAAI,EAAJA,EAAML,QAAS,uBAXP,CACxB,MAAMY,EAAiBP,EAAKA,MAAQ,GACpCG,QAAQC,IAAI,kCAAmCG,GAC/ClB,EAAcmB,MAAMC,QAAQF,GAAkBA,EAAiB,IAC3DC,MAAMC,QAAQF,IAAmBA,EAAeG,OAAS,GAC3DP,QAAQC,IAAI,6BAA8BG,EAAe,GAAGI,IAC5DnB,EAAkBe,EAAe,GAAGI,KAEpCR,QAAQC,IAAI,kCAAmCG,EAEnD,CAGF,CAAE,MAAOZ,GACPQ,QAAQR,MAAM,sBAAuBA,GACrCC,EAAS,uBACTP,EAAc,GAChB,CAAC,QACCK,GAAW,EACb,GAGIkB,EAAmB,SAACC,GAA0B,IAApBC,EAAKC,UAAAL,OAAA,QAAAM,IAAAD,UAAA,GAAAA,UAAA,GAAG,OACtC,OAAQ7B,GACN,IAAK,KAML,QACE,OAAO2B,EAAK,GAADI,OAAIH,EAAK,OALtB,IAAK,KACH,OAAOD,EAAK,GAADI,OAAIH,EAAK,OACtB,IAAK,KACH,OAAOD,EAAK,GAADI,OAAIH,EAAK,OAI1B,EAEMI,EAAmBA,CAACL,EAAMC,IACjBF,EAAiBC,EAAMC,IACrB,GAGXK,EAAqBA,IAClBX,MAAMC,QAAQrB,GAAcA,EAAWgC,KAAKC,GAAOA,EAAIV,KAAOpB,QAAkByB,EAazF,OAAIvB,GAEA6B,EAAAA,EAAAA,KAAA,OAAKC,UAAU,oBAAmBC,UAChCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,sBAAqBC,UAClCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,UAASC,SAAC,wBAM7B7B,GAEA2B,EAAAA,EAAAA,KAAA,OAAKC,UAAU,oBAAmBC,UAChCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,sBAAqBC,SAAA,EAClCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,QAAOC,SAAE7B,KACxB2B,EAAAA,EAAAA,KAAA,UAAQI,QAASvC,EAAQqC,SAAC,gBAOhCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,oBAAmBC,UAChCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,sBAAqBC,SAAA,EAClCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,mBAAkBC,SAAA,EAC/BC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,CACuB,OAApBtC,GAA4B,oBACR,OAApBA,GAA4B,YACR,OAApBA,GAA4B,oBAE/BoC,EAAAA,EAAAA,KAAA,UAAQC,UAAU,YAAYG,QAASvC,EAAQqC,SAAC,eAGlDC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAE3BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,eAAcC,UACzBhB,MAAMC,QAAQrB,GAAcA,EAAa,IAAIuC,IAAIC,IACjDN,EAAAA,EAAAA,KAAA,UAEEC,UAAS,gBAAAN,OAAkB1B,IAAmBqC,EAASjB,GAAK,SAAW,IACvEe,QAASA,IAAMlC,EAAkBoC,EAASjB,IAAIa,SAE7CZ,EAAiBgB,IAJbA,EAASjB,QAUpBW,EAAAA,EAAAA,KAAA,OAAKC,UAAU,uBAAsBC,UACnCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,wBAAuBC,SAAA,EACpCF,EAAAA,EAAAA,KAAA,MAAAE,SAAKL,IAAuBP,EAAiBO,KAAwB,MACrEG,EAAAA,EAAAA,KAAA,OAAKC,UAAU,kBAAiBC,SAC7B,MACC,MAAMK,EA/DEC,MACtB,MAAMF,EAAWT,IACjBhB,QAAQC,IAAI,oCAAqCb,GACjDY,QAAQC,IAAI,8BAA+BwB,GAC3CzB,QAAQC,IAAI,wCAAiD,OAARwB,QAAQ,IAARA,OAAQ,EAARA,EAAUG,WAC/D,MAAMF,EAAQD,GAAWA,EAASG,WAAkB,GAEpD,OADA5B,QAAQC,IAAI,qCAAsCyB,GAC3CA,GAwDqBC,GAEd,OADA3B,QAAQC,IAAI,mBAAoByB,EAAMnB,OAAQ,SACvCmB,EAAMF,IAAI,CAACd,EAAMmB,KACxBP,EAAAA,EAAAA,MAAA,OAAmBF,UAAU,iBAAgBC,SAAA,EAC3CC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,cAAaC,SAAA,EAC1BF,EAAAA,EAAAA,KAAA,MAAAE,SAAKZ,EAAiBC,MACtBY,EAAAA,EAAAA,MAAA,QAAMF,UAAU,aAAYC,SAAA,CAAEX,EAAKoB,MAAM,IAAEpB,EAAKqB,gBAElDZ,EAAAA,EAAAA,KAAA,KAAGC,UAAU,mBAAkBC,SAC5BN,EAAiBL,EAAM,iBAEzBK,EAAiBL,EAAM,iBACtBS,EAAAA,EAAAA,KAAA,OAAKC,UAAU,mBAAkBC,UAC/BC,EAAAA,EAAAA,MAAA,SAAAD,SAAA,EACEC,EAAAA,EAAAA,MAAA,UAAAD,SAAA,CACuB,OAApBtC,GAA4B,wBACR,OAApBA,GAA4B,gBACR,OAApBA,GAA4B,mBAE9BgC,EAAiBL,EAAM,qBAI9BY,EAAAA,EAAAA,MAAA,OAAKF,UAAU,cAAaC,SAAA,CACzBX,EAAKsB,UAAWb,EAAAA,EAAAA,KAAA,QAAMC,UAAU,kBAAiBC,SAAC,uBAClDX,EAAKuB,eAAgBd,EAAAA,EAAAA,KAAA,QAAMC,UAAU,uBAAsBC,SAAC,iBAC5DX,EAAKwB,gBACJZ,EAAAA,EAAAA,MAAA,QAAMF,UAAU,oBAAmBC,SAAA,CACZ,OAApBtC,GAA4B,gBACR,OAApBA,GAA4B,cACR,OAApBA,GAA4B,iBAGhC2B,EAAKyB,QACJb,EAAAA,EAAAA,MAAA,QAAMF,UAAU,YAAWC,SAAA,CACJ,OAApBtC,GAA4B,OACR,OAApBA,GAA4B,MACR,OAApBA,GAA4B,gBAlC3B2B,EAAKF,IAwChB,EA5CA,iBAoDjB,C","sources":["components/DynamicMenu.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport MenuService from '../services/menuService';\nimport '../FullMenu.css';\n\nfunction DynamicMenu({ currentLanguage, onClose }) {\n  const [categories, setCategories] = useState([]);\n  const [activeCategory, setActiveCategory] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    loadMenu();\n  }, []);\n\n  const loadMenu = async () => {\n    try {\n      setLoading(true);\n      const data = await MenuService.getCompleteMenu();\n      console.log('DynamicMenu API response:', data); // Debug log\n      \n      if (data && data.success) {\n        const categoriesData = data.data || [];\n        console.log('DynamicMenu setting categories:', categoriesData); // Debug log\n        setCategories(Array.isArray(categoriesData) ? categoriesData : []);\n        if (Array.isArray(categoriesData) && categoriesData.length > 0) {\n          console.log('Setting activeCategory to:', categoriesData[0].id);\n          setActiveCategory(categoriesData[0].id);\n        } else {\n          console.log('No categories to set as active:', categoriesData);\n        }\n      } else {\n        throw new Error(data?.error || 'Failed to load menu');\n      }\n    } catch (error) {\n      console.error('Error loading menu:', error);\n      setError('Failed to load menu');\n      setCategories([]); // Ensure it's always an array\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getLocalizedName = (item, field = 'name') => {\n    switch (currentLanguage) {\n      case 'al':\n        return item[`${field}AL`];\n      case 'en':\n        return item[`${field}EN`];\n      case 'it':\n        return item[`${field}IT`];\n      default:\n        return item[`${field}AL`];\n    }\n  };\n\n  const getLocalizedText = (item, field) => {\n    const text = getLocalizedName(item, field);\n    return text || '';\n  };\n\n  const getCurrentCategory = () => {\n    return Array.isArray(categories) ? categories.find(cat => cat.id === activeCategory) : undefined;\n  };\n\n  const getCurrentItems = () => {\n    const category = getCurrentCategory();\n    console.log('getCurrentItems - activeCategory:', activeCategory);\n    console.log('getCurrentItems - category:', category);\n    console.log('getCurrentItems - category.menuItems:', category?.menuItems);\n    const items = category ? category.menuItems || [] : [];\n    console.log('getCurrentItems - returning items:', items);\n    return items;\n  };\n\n  if (loading) {\n    return (\n      <div className=\"full-menu-overlay\">\n        <div className=\"full-menu-container\">\n          <div className=\"loading\">Loading menu...</div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"full-menu-overlay\">\n        <div className=\"full-menu-container\">\n          <div className=\"error\">{error}</div>\n          <button onClick={onClose}>Close</button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"full-menu-overlay\">\n      <div className=\"full-menu-container\">\n        <div className=\"full-menu-header\">\n          <h1>\n            {currentLanguage === 'al' && 'Menuja e Plot√´'}\n            {currentLanguage === 'en' && 'Full Menu'}\n            {currentLanguage === 'it' && 'Menu Completo'}\n          </h1>\n          <button className=\"close-btn\" onClick={onClose}>‚úï</button>\n        </div>\n        \n        <div className=\"menu-content\">\n          {/* Category Navigation */}\n          <div className=\"category-nav\">\n            {(Array.isArray(categories) ? categories : []).map(category => (\n              <button\n                key={category.id}\n                className={`category-btn ${activeCategory === category.id ? 'active' : ''}`}\n                onClick={() => setActiveCategory(category.id)}\n              >\n                {getLocalizedName(category)}\n              </button>\n            ))}\n          </div>\n\n          {/* Menu Items */}\n          <div className=\"menu-items-container\">\n            <div className=\"menu-category-section\">\n              <h2>{getCurrentCategory() ? getLocalizedName(getCurrentCategory()) : ''}</h2>\n              <div className=\"menu-items-grid\">\n                {(() => {\n                  const items = getCurrentItems();\n                  console.log('Rendering items:', items.length, 'items');\n                  return items.map((item, index) => (\n                  <div key={item.id} className=\"menu-item-card\">\n                    <div className=\"item-header\">\n                      <h3>{getLocalizedName(item)}</h3>\n                      <span className=\"item-price\">{item.price} {item.currency}</span>\n                    </div>\n                    <p className=\"item-description\">\n                      {getLocalizedText(item, 'description')}\n                    </p>\n                    {getLocalizedText(item, 'ingredients') && (\n                      <div className=\"item-ingredients\">\n                        <small>\n                          <strong>\n                            {currentLanguage === 'al' && 'P√´rb√´r√´sit: '}\n                            {currentLanguage === 'en' && 'Ingredients: '}\n                            {currentLanguage === 'it' && 'Ingredienti: '}\n                          </strong>\n                          {getLocalizedText(item, 'ingredients')}\n                        </small>\n                      </div>\n                    )}\n                    <div className=\"item-badges\">\n                      {item.isSpicy && <span className=\"spicy-indicator\">üå∂Ô∏è</span>}\n                      {item.isVegetarian && <span className=\"vegetarian-indicator\">üå±</span>}\n                      {item.isRecommended && (\n                        <span className=\"recommended-badge\">\n                          {currentLanguage === 'al' && 'I Rekomanduar'}\n                          {currentLanguage === 'en' && 'Recommended'}\n                          {currentLanguage === 'it' && 'Consigliato'}\n                        </span>\n                      )}\n                      {item.isNew && (\n                        <span className=\"new-badge\">\n                          {currentLanguage === 'al' && 'E Re'}\n                          {currentLanguage === 'en' && 'New'}\n                          {currentLanguage === 'it' && 'Nuovo'}\n                        </span>\n                      )}\n                    </div>\n                  </div>\n                  ));\n                })()}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default DynamicMenu; "],"names":["_ref","currentLanguage","onClose","categories","setCategories","useState","activeCategory","setActiveCategory","loading","setLoading","error","setError","useEffect","loadMenu","async","data","MenuService","getCompleteMenu","console","log","success","Error","categoriesData","Array","isArray","length","id","getLocalizedName","item","field","arguments","undefined","concat","getLocalizedText","getCurrentCategory","find","cat","_jsx","className","children","_jsxs","onClick","map","category","items","getCurrentItems","menuItems","index","price","currency","isSpicy","isVegetarian","isRecommended","isNew"],"sourceRoot":""}